// Code generated by protoc-gen-go. DO NOT EDIT.
// source: permissions.proto

/*
Package chremoas_perms is a generated protocol buffer package.

It is generated from these files:
	permissions.proto

It has these top-level messages:
	NilRequest
	UsersRequest
	UsersResponse
	PermissionsRequest
	Permission
	PermissionsResponse
	PerformResponse
*/
package chremoas_perms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NilRequest struct {
}

func (m *NilRequest) Reset()                    { *m = NilRequest{} }
func (m *NilRequest) String() string            { return proto.CompactTextString(m) }
func (*NilRequest) ProtoMessage()               {}
func (*NilRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UsersRequest struct {
	Permission string `protobuf:"bytes,1,opt,name=Permission" json:"Permission,omitempty"`
}

func (m *UsersRequest) Reset()                    { *m = UsersRequest{} }
func (m *UsersRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersRequest) ProtoMessage()               {}
func (*UsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsersRequest) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type UsersResponse struct {
	UserList []int64 `protobuf:"varint,1,rep,packed,name=UserList" json:"UserList,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersResponse) GetUserList() []int64 {
	if m != nil {
		return m.UserList
	}
	return nil
}

type PermissionsRequest struct {
	User            string   `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	PermissionsList []string `protobuf:"bytes,2,rep,name=PermissionsList" json:"PermissionsList,omitempty"`
}

func (m *PermissionsRequest) Reset()                    { *m = PermissionsRequest{} }
func (m *PermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*PermissionsRequest) ProtoMessage()               {}
func (*PermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PermissionsRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PermissionsRequest) GetPermissionsList() []string {
	if m != nil {
		return m.PermissionsList
	}
	return nil
}

type Permission struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Permission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Permission) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type PermissionsResponse struct {
	PermissionsList []*Permission `protobuf:"bytes,1,rep,name=PermissionsList" json:"PermissionsList,omitempty"`
}

func (m *PermissionsResponse) Reset()                    { *m = PermissionsResponse{} }
func (m *PermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*PermissionsResponse) ProtoMessage()               {}
func (*PermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PermissionsResponse) GetPermissionsList() []*Permission {
	if m != nil {
		return m.PermissionsList
	}
	return nil
}

type PerformResponse struct {
	CanPerform bool `protobuf:"varint,1,opt,name=CanPerform" json:"CanPerform,omitempty"`
}

func (m *PerformResponse) Reset()                    { *m = PerformResponse{} }
func (m *PerformResponse) String() string            { return proto.CompactTextString(m) }
func (*PerformResponse) ProtoMessage()               {}
func (*PerformResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PerformResponse) GetCanPerform() bool {
	if m != nil {
		return m.CanPerform
	}
	return false
}

func init() {
	proto.RegisterType((*NilRequest)(nil), "chremoas.perms.NilRequest")
	proto.RegisterType((*UsersRequest)(nil), "chremoas.perms.UsersRequest")
	proto.RegisterType((*UsersResponse)(nil), "chremoas.perms.UsersResponse")
	proto.RegisterType((*PermissionsRequest)(nil), "chremoas.perms.PermissionsRequest")
	proto.RegisterType((*Permission)(nil), "chremoas.perms.Permission")
	proto.RegisterType((*PermissionsResponse)(nil), "chremoas.perms.PermissionsResponse")
	proto.RegisterType((*PerformResponse)(nil), "chremoas.perms.PerformResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Permissions service

type PermissionsClient interface {
	Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error)
	AddPermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error)
	RemovePermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error)
	ListPermissions(ctx context.Context, in *NilRequest, opts ...client.CallOption) (*PermissionsResponse, error)
	ListPermissionUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	ListUserPermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error)
}

type permissionsClient struct {
	c           client.Client
	serviceName string
}

func NewPermissionsClient(serviceName string, c client.Client) PermissionsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.perms"
	}
	return &permissionsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *permissionsClient) Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.Perform", in)
	out := new(PerformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) AddPermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.AddPermission", in)
	out := new(Permission)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) RemovePermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.RemovePermission", in)
	out := new(Permission)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) ListPermissions(ctx context.Context, in *NilRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.ListPermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) ListPermissionUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.ListPermissionUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) ListUserPermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.ListUserPermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permissions service

type PermissionsHandler interface {
	Perform(context.Context, *PermissionsRequest, *PerformResponse) error
	AddPermission(context.Context, *Permission, *Permission) error
	RemovePermission(context.Context, *Permission, *Permission) error
	ListPermissions(context.Context, *NilRequest, *PermissionsResponse) error
	ListPermissionUsers(context.Context, *UsersRequest, *UsersResponse) error
	ListUserPermissions(context.Context, *PermissionsRequest, *PermissionsResponse) error
}

func RegisterPermissionsHandler(s server.Server, hdlr PermissionsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Permissions{hdlr}, opts...))
}

type Permissions struct {
	PermissionsHandler
}

func (h *Permissions) Perform(ctx context.Context, in *PermissionsRequest, out *PerformResponse) error {
	return h.PermissionsHandler.Perform(ctx, in, out)
}

func (h *Permissions) AddPermission(ctx context.Context, in *Permission, out *Permission) error {
	return h.PermissionsHandler.AddPermission(ctx, in, out)
}

func (h *Permissions) RemovePermission(ctx context.Context, in *Permission, out *Permission) error {
	return h.PermissionsHandler.RemovePermission(ctx, in, out)
}

func (h *Permissions) ListPermissions(ctx context.Context, in *NilRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.ListPermissions(ctx, in, out)
}

func (h *Permissions) ListPermissionUsers(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.PermissionsHandler.ListPermissionUsers(ctx, in, out)
}

func (h *Permissions) ListUserPermissions(ctx context.Context, in *PermissionsRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.ListUserPermissions(ctx, in, out)
}

func init() { proto.RegisterFile("permissions.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x4f, 0x32, 0x31,
	0x10, 0xc6, 0xf9, 0x97, 0xf7, 0x85, 0x01, 0x44, 0x87, 0x0b, 0xd9, 0x28, 0x6e, 0xea, 0x65, 0x13,
	0x93, 0x4d, 0xc4, 0x4f, 0xa0, 0x72, 0x31, 0x21, 0x84, 0x34, 0x78, 0xf2, 0x22, 0x42, 0x8d, 0x9b,
	0xb8, 0x74, 0xed, 0xac, 0x7e, 0x04, 0x3f, 0xb7, 0x69, 0x2d, 0xa5, 0x80, 0x6c, 0x38, 0x78, 0x6b,
	0x9f, 0x99, 0xfe, 0xfa, 0x3c, 0xb3, 0x5d, 0x38, 0xc9, 0x84, 0x4a, 0x13, 0xa2, 0x44, 0x2e, 0x29,
	0xce, 0x94, 0xcc, 0x25, 0x1e, 0xcd, 0x5f, 0x95, 0x48, 0xe5, 0x8c, 0x62, 0x5d, 0x23, 0xd6, 0x02,
	0x18, 0x27, 0x6f, 0x5c, 0xbc, 0x7f, 0x08, 0xca, 0x59, 0x0c, 0xad, 0x07, 0x12, 0x8a, 0xec, 0x1e,
	0xfb, 0x00, 0x13, 0x87, 0xe8, 0x95, 0xc3, 0x72, 0xd4, 0xe0, 0x9e, 0xc2, 0x2e, 0xa1, 0x6d, 0xfb,
	0x29, 0x93, 0x4b, 0x12, 0x18, 0x40, 0x5d, 0x0b, 0xa3, 0x84, 0xf2, 0x5e, 0x39, 0xac, 0x46, 0x55,
	0xee, 0xf6, 0x8c, 0x03, 0xae, 0x8f, 0xba, 0x2b, 0x10, 0x6a, 0xba, 0xc3, 0xc2, 0xcd, 0x1a, 0x23,
	0xe8, 0x78, 0x9d, 0x06, 0x56, 0x09, 0xab, 0x51, 0x83, 0x6f, 0xcb, 0xec, 0xd6, 0x37, 0xa8, 0x59,
	0xe3, 0x59, 0x2a, 0x56, 0x2c, 0xbd, 0xc6, 0x10, 0x9a, 0x43, 0x41, 0x73, 0x95, 0x64, 0xb9, 0xce,
	0x50, 0x31, 0x25, 0x5f, 0x62, 0x8f, 0xd0, 0xdd, 0xf0, 0x65, 0xa3, 0x0c, 0x77, 0x4d, 0xe8, 0x44,
	0xcd, 0x41, 0x10, 0x6f, 0xce, 0x30, 0x5e, 0xb7, 0xed, 0x1a, 0xbc, 0x32, 0x94, 0x17, 0xa9, 0x52,
	0x07, 0xee, 0x03, 0xdc, 0xcd, 0x96, 0x56, 0x35, 0x5e, 0xeb, 0xdc, 0x53, 0x06, 0x5f, 0x35, 0x68,
	0x7a, 0x18, 0x9c, 0xc0, 0x7f, 0x5b, 0x42, 0xb6, 0xff, 0xea, 0xd5, 0x40, 0x83, 0xf3, 0x5f, 0x7a,
	0xfc, 0xfb, 0x59, 0x09, 0xef, 0xa1, 0x7d, 0xb3, 0x58, 0x78, 0x83, 0x2b, 0x88, 0x14, 0x14, 0xd4,
	0x58, 0x09, 0x47, 0x70, 0xcc, 0x45, 0x2a, 0x3f, 0xc5, 0x9f, 0xd0, 0xa6, 0xd0, 0xd1, 0x53, 0xf3,
	0xd3, 0xef, 0x1c, 0x58, 0x3f, 0xd7, 0xe0, 0xa2, 0x70, 0x1c, 0x2e, 0xee, 0x14, 0xba, 0x9b, 0x54,
	0xf3, 0x66, 0xf1, 0x74, 0xfb, 0xb4, 0xff, 0xf4, 0x83, 0xb3, 0x3d, 0x55, 0x47, 0x7d, 0xfa, 0xa1,
	0x6a, 0xd9, 0xf7, 0x7b, 0xc8, 0x27, 0x3a, 0xcc, 0xf7, 0xf3, 0x3f, 0xf3, 0xcb, 0x5e, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0x8e, 0xe4, 0x41, 0xc7, 0x03, 0x00, 0x00,
}
